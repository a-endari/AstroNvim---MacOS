if true then
    return {}
end -- WARN: REMOVE THIS LINE TO ACTIVATE THIS FILE

-- AstroLSP allows you to customize the features in AstroNvim's LSP configuration engine
-- Configuration documentation can be found with `:h astrolsp`
-- NOTE: We highly recommend setting up the Lua Language Server (`:LspInstall lua_ls`)
--       as this provides autocomplete and documentation while editing

---@type LazySpec
return {
    "AstroNvim/astrolsp",
    ---@type AstroLSPOpts
    opts = {
        -- Configuration table of features provided by AstroLSP
        features = {
            autoformat = true, -- enable or disable auto formatting on start
            codelens = true, -- enable/disable codelens refresh on start
            inlay_hints = false, -- enable/disable inlay hints on start
            semantic_tokens = true -- enable/disable semantic token highlighting
        },
        -- customize lsp formatting options
        formatting = {
            -- control auto formatting on save
            format_on_save = {
                enabled = true, -- enable or disable format on save globally
                allow_filetypes = { -- enable format on save for specified filetypes only
                    -- "go",
                },
                ignore_filetypes = { -- disable format on save for specified filetypes
                    -- "python",
                }
            },
            disabled = { -- disable formatting capabilities for the listed language servers
                -- disable lua_ls formatting capability if you want to use StyLua to format your lua code
                -- "lua_ls",
            },
            timeout_ms = 1000 -- default format timeout
            -- filter = function(client) -- fully override the default formatting function
            --   return true
            -- end
        },
        -- enable servers that you already have installed without mason
        servers = {
            jdtls = {
                -- JDTLS will be handled by nvim-jdtls plugin
                mason = false
            }
            -- "pyright"
            -- "ltex",
        },
        -- customize language server configuration options passed to `lspconfig`
        ---@diagnostic disable: missing-fields
        config = {
            ruff = {
            settings = {
                    args = {"--ignore=E501"}
                }
            }
            -- clangd = { capabilities = { offsetEncoding = "utf-8" } },
        },
        -- customize how language servers are attached
        handlers = {
            basedpyright = false, -- disable basedpyright completely
            pyright = false, -- disable pyright completely
        },
        -- Configure buffer local auto commands to add when attaching a language server
        autocmds = {
            lsp_cleanup = {
                {
                    event = "BufDelete",
                    desc = "Stop LSP clients when buffer is deleted",
                    callback = function(args)
                        local clients = vim.lsp.get_clients({ bufnr = args.buf })
                        for _, client in ipairs(clients) do
                            if client.name == "ruff" then
                                vim.lsp.stop_client(client.id, true)
                            end
                        end
                    end
                },
                {
                    event = "VimLeave",
                    desc = "Stop all LSP clients on exit",
                    callback = function()
                        local clients = vim.lsp.get_clients()
                        for _, client in ipairs(clients) do
                            vim.lsp.stop_client(client.id, true)
                        end
                    end
                }
            }
        },
        -- A custom `on_attach` function to be run after the default `on_attach` function
        -- takes two parameters `client` and `bufnr`  (`:h lspconfig-setup`)
        on_attach = function(client, bufnr)
            -- Kill any pyright/basedpyright processes that might have started
            if client.name == "basedpyright" or client.name == "pyright" then
                vim.lsp.stop_client(client.id, true)
            end
        end
    }
}
